# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_opensync', [dirname(__file__)])
        except ImportError:
            import _opensync
            return _opensync
        if fp is not None:
            try:
                _mod = imp.load_module('_opensync', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _opensync = swig_import_helper()
    del swig_import_helper
else:
    import _opensync
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def cdata(*args):
  return _opensync.cdata(*args)
cdata = _opensync.cdata

def memmove(*args):
  return _opensync.memmove(*args)
memmove = _opensync.memmove
TRUE = _opensync.TRUE
FALSE = _opensync.FALSE
CHANGE_UNKNOWN = _opensync.CHANGE_UNKNOWN
CHANGE_ADDED = _opensync.CHANGE_ADDED
CHANGE_UNMODIFIED = _opensync.CHANGE_UNMODIFIED
CHANGE_DELETED = _opensync.CHANGE_DELETED
CHANGE_MODIFIED = _opensync.CHANGE_MODIFIED
class OSyncEnv(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _opensync.new_OSyncEnv(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _opensync.delete_OSyncEnv
    __del__ = lambda self : None;
    def initialize(self): return _opensync.OSyncEnv_initialize(self)
    def finalize(self): return _opensync.OSyncEnv_finalize(self)
    def num_plugins(self): return _opensync.OSyncEnv_num_plugins(self)
    def get_nth_plugin(self, *args): return _opensync.OSyncEnv_get_nth_plugin(self, *args)
OSyncEnv_swigregister = _opensync.OSyncEnv_swigregister
OSyncEnv_swigregister(OSyncEnv)

class OSyncPlugin(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _opensync.new_OSyncPlugin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _opensync.delete_OSyncPlugin
    __del__ = lambda self : None;
    def get_name(self): return _opensync.OSyncPlugin_get_name(self)
    name = property(get_name)

OSyncPlugin_swigregister = _opensync.OSyncPlugin_swigregister
OSyncPlugin_swigregister(OSyncPlugin)

class OSyncPluginInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _opensync.new_OSyncPluginInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def accept_objtype(self, *args): return _opensync.OSyncPluginInfo_accept_objtype(self, *args)
    def accept_objformat(self, *args): return _opensync.OSyncPluginInfo_accept_objformat(self, *args)
    def set_name(self, *args): return _opensync.OSyncPluginInfo_set_name(self, *args)
    def get_name(self): return _opensync.OSyncPluginInfo_get_name(self)
    def set_longname(self, *args): return _opensync.OSyncPluginInfo_set_longname(self, *args)
    def get_longname(self): return _opensync.OSyncPluginInfo_get_longname(self)
    def set_description(self, *args): return _opensync.OSyncPluginInfo_set_description(self, *args)
    def get_description(self): return _opensync.OSyncPluginInfo_get_description(self)
    name = property(get_name, set_name)
    longname = property(get_longname, set_longname)
    description = property(get_description, set_description)

    __swig_destroy__ = _opensync.delete_OSyncPluginInfo
    __del__ = lambda self : None;
OSyncPluginInfo_swigregister = _opensync.OSyncPluginInfo_swigregister
OSyncPluginInfo_swigregister(OSyncPluginInfo)

class OSyncContext(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _opensync.new_OSyncContext(*args)
        try: self.this.append(this)
        except: self.this = this
    def report_success(self, *args): return _opensync.OSyncContext_report_success(self, *args)
    def report_error(self, *args): return _opensync.OSyncContext_report_error(self, *args)
    __swig_destroy__ = _opensync.delete_OSyncContext
    __del__ = lambda self : None;
OSyncContext_swigregister = _opensync.OSyncContext_swigregister
OSyncContext_swigregister(OSyncContext)

class OSyncChange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, obj = None):
        if obj:
            this = _opensync.new_OSyncChange(obj)
        else:
            this = _opensync.new_OSyncChange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _opensync.delete_OSyncChange
    __del__ = lambda self : None;
    def __set_data(self, *args): return _opensync.OSyncChange___set_data(self, *args)
    def __get_data(self): return _opensync.OSyncChange___get_data(self)
    def __get_datasize(self): return _opensync.OSyncChange___get_datasize(self)
    def get_data(self):
    	try:
    		return self.__data
    	except AttributeError:
    		self.__data = cdata(self.__get_data(), self.__get_datasize())
    		# FIXME: despite passing the size around, sometimes the data
    		# seems also to be null-terminated; remove this.
    		if self.__data[-1] == '\0':
    			self.__data = self.__data[:-1]
    	return self.__data

    def set_data(self, data):
    	self.__data = data
    	self.__set_data(data)

    data = property(get_data,set_data)

    def report(self, *args): return _opensync.OSyncChange_report(self, *args)
    def set_uid(self, *args): return _opensync.OSyncChange_set_uid(self, *args)
    def get_uid(self): return _opensync.OSyncChange_get_uid(self)
    uid = property(get_uid, set_uid)

    def set_format(self, *args): return _opensync.OSyncChange_set_format(self, *args)
    def get_format(self): return _opensync.OSyncChange_get_format(self)
    format = property(get_format, set_format)

    def set_objtype(self, *args): return _opensync.OSyncChange_set_objtype(self, *args)
    def get_objtype(self): return _opensync.OSyncChange_get_objtype(self)
    objtype = property(get_objtype, set_objtype)

    def set_changetype(self, *args): return _opensync.OSyncChange_set_changetype(self, *args)
    def get_changetype(self): return _opensync.OSyncChange_get_changetype(self)
    changetype = property(get_changetype, set_changetype)

    def set_hash(self, *args): return _opensync.OSyncChange_set_hash(self, *args)
    def get_hash(self): return _opensync.OSyncChange_get_hash(self)
    hash = property(get_hash, set_hash)

    def set_member(self, *args): return _opensync.OSyncChange_set_member(self, *args)
    def get_member(self): return _opensync.OSyncChange_get_member(self)
    member = property(get_member, set_member);

OSyncChange_swigregister = _opensync.OSyncChange_swigregister
OSyncChange_swigregister(OSyncChange)

class OSyncMember(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _opensync.new_OSyncMember(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_slow_sync(self, *args): return _opensync.OSyncMember_get_slow_sync(self, *args)
    def set_slow_sync(self, *args): return _opensync.OSyncMember_set_slow_sync(self, *args)
    def objtype_enabled(self, *args): return _opensync.OSyncMember_objtype_enabled(self, *args)
    def get_configdir(self): return _opensync.OSyncMember_get_configdir(self)
    def set_configdir(self, *args): return _opensync.OSyncMember_set_configdir(self, *args)
    configdir = property(get_configdir, set_configdir);

    def __get_config(self): return _opensync.OSyncMember___get_config(self)
    def __set_config(self, *args): return _opensync.OSyncMember___set_config(self, *args)
    def get_config(self):
    	data, len = self.__get_config()
    	return cdata(data, len)
    def set_config(self, data):
    	self.__set_config(data, len(data))
    config = property(get_config, set_config)

    __swig_destroy__ = _opensync.delete_OSyncMember
    __del__ = lambda self : None;
OSyncMember_swigregister = _opensync.OSyncMember_swigregister
OSyncMember_swigregister(OSyncMember)

class OSyncHashTable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _opensync.new_OSyncHashTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _opensync.delete_OSyncHashTable
    __del__ = lambda self : None;
    def forget(self): return _opensync.OSyncHashTable_forget(self)
    def load(self, *args): return _opensync.OSyncHashTable_load(self, *args)
    def close(self): return _opensync.OSyncHashTable_close(self)
    def update_hash(self, *args): return _opensync.OSyncHashTable_update_hash(self, *args)
    def report(self, *args): return _opensync.OSyncHashTable_report(self, *args)
    def report_deleted(self, *args): return _opensync.OSyncHashTable_report_deleted(self, *args)
    def get_changetype(self, *args): return _opensync.OSyncHashTable_get_changetype(self, *args)
    def detect_change(self, *args): return _opensync.OSyncHashTable_detect_change(self, *args)
    def set_slow_sync(self, *args): return _opensync.OSyncHashTable_set_slow_sync(self, *args)
OSyncHashTable_swigregister = _opensync.OSyncHashTable_swigregister
OSyncHashTable_swigregister(OSyncHashTable)

NO_ERROR = _opensync.NO_ERROR
ERROR_GENERIC = _opensync.ERROR_GENERIC
ERROR_IO_ERROR = _opensync.ERROR_IO_ERROR
ERROR_NOT_SUPPORTED = _opensync.ERROR_NOT_SUPPORTED
ERROR_TIMEOUT = _opensync.ERROR_TIMEOUT
ERROR_DISCONNECTED = _opensync.ERROR_DISCONNECTED
ERROR_FILE_NOT_FOUND = _opensync.ERROR_FILE_NOT_FOUND
ERROR_EXISTS = _opensync.ERROR_EXISTS
ERROR_CONVERT = _opensync.ERROR_CONVERT
ERROR_MISCONFIGURATION = _opensync.ERROR_MISCONFIGURATION
ERROR_INITIALIZATION = _opensync.ERROR_INITIALIZATION
ERROR_PARAMETER = _opensync.ERROR_PARAMETER
ERROR_EXPECTED = _opensync.ERROR_EXPECTED
ERROR_NO_CONNECTION = _opensync.ERROR_NO_CONNECTION
ERROR_TEMPORARY = _opensync.ERROR_TEMPORARY
ERROR_LOCKED = _opensync.ERROR_LOCKED
ERROR_PLUGIN_NOT_FOUND = _opensync.ERROR_PLUGIN_NOT_FOUND


