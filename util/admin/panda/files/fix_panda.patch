--- panda.py~	2011-02-10 07:53:21.000000000 +0100
+++ panda.py	2013-06-17 22:56:13.867112731 +0200
@@ -6,15 +6,20 @@
 import glob
 import pisi
 import shutil
+from subprocess import call
 
 sysdir = "/sys/bus/pci/devices/"
 driversDB = "/usr/share/X11/DriversDB"
 
-grub_file = "/boot/grub/grub.conf"
-grub_new = "/boot/grub/grub.conf.new"
-grub_back = "/boot/grub/grub.conf.back"
+grub_file = "/boot/grub2/grub.cfg"
+grub_new = "/boot/grub2/grub.cfg.new"
+grub_back = "/boot/grub2/grub.cfg.back"
+grub_default_file = "/etc/default/grub"
+grub_default_file_new = "/etc/default/grub.new"
+grub_default_file_back = "/etc/default/grub.back"
 kernel_file = "/etc/kernel/kernel"
 kernel_file_pae = "/etc/kernel/kernel-pae"
+nvidia_blacklist_file = "/etc/modprobe.d/nvidia-blacklist.conf"
 
 class Panda():
     '''Pardus Alternative Driver Administration'''
@@ -102,6 +107,7 @@
         kernel_dict = {}
 
         for kernel_file in glob.glob("/etc/kernel/*"):
+            if not os.path.isfile(kernel_file): continue
             kernel_name = os.path.basename(kernel_file)
             kernel_dict[kernel_name] = open(kernel_file).read()
 
@@ -155,6 +161,34 @@
 
         return list(set(drivers))
 
+    def update_system_files(self, arg):
+        '''Update system files to enable the use of propretiary graphic card drivers'''
+        if self.os_driver is None:
+            self.get_blacklisted_module()
+
+        status, modified = self.update_grub_default_entries(arg)
+        if status in ["os", "generic", "vendor"] and modified:
+            self.update_grub_cfg()
+            self.set_libGL(self.driver_name if self.driver_name in ["nvidia-current", "nvidia96", "nvidia173", "fglrx"] and status == "vendor" else "mesa")
+            if self.driver_name in ["nvidia-current", "nvidia96", "nvidia173"] and status == "vendor":
+                open(nvidia_blacklist_file, "w").write("blacklist nouveau\n")
+            elif self.driver_name in ["nvidia-current", "nvidia96", "nvidia173"] and os.path.isfile(nvidia_blacklist_file):
+                os.remove(nvidia_blacklist_file)
+                
+
+        return status
+
+    def set_libGL(self, arg):
+        '''alternatives --set libGL /usr/lib/arg/libGL.so.1.2.0'''
+        try:
+            retcode = call("alternatives --set libGL /usr/lib/%s/libGL.so.1.2.0" % arg, shell=True)
+        except OSError as e:
+            print >>sys.stderr, "alternatives --set libGL /usr/lib/%s/libGL.so.1.2.0 failed:" % arg, e
+        if not arg in ["mesa", "nvidia-current", "fglrx"]: return
+        try:
+            retcode = call("alternatives --set libGL-32bit /usr/lib32/%s/libGL.so.1.2.0" % arg, shell=True)
+        except OSError as e:
+            print >>sys.stderr, "alternatives --set libGL-32bit /usr/lib32/%s/libGL.so.1.2.0 failed:" % arg, e
 
     ########################################
     # Functions essential for grub parsing #
@@ -215,7 +249,90 @@
                     else:
                         return "os"
 
-        return "Cannot parse grub.conf"
+        return "Cannot parse %s" % grub_file
+
+    #######################################
+    # Grub2 parsing and writing functions #
+
+    def update_grub_default_entries(self, arg):
+        '''Edit grub default file to enable the use of propretiary graphic card drivers'''
+        if arg == "vendor" and self.os_driver is None:
+            print "I'm not able to install vendor drivers"
+            return
+        elif arg:
+            pass
+        else:
+            return "Wrong parameter!\" You can use: vendor or os"
+
+        configured = False
+        grub_tmp = open(grub_default_file_new, "w")
+
+        with open(grub_default_file) as grub_default:
+            for line in grub_default:
+                if "GRUB_CMDLINE_LINUX=" in line:
+                    params = {} if line.startswith("#") else dict((k, v.split(','))
+                                                                  for k,v in (item.split('=') if "=" in item else (item, '')
+                                                                              for item in line.replace('"', '').split("LINUX=")[1].split()))
+                    old_line = " ".join(["%s%s%s" % (k, "=" if l[0] else "", ",".join([v for v in l])) for k, l in sorted(params.items())])
+                    if arg == "os":
+                        try :
+                            params["blacklist"] = [x for x in params["blacklist"] if x != self.os_driver]
+                        except KeyError:
+                            pass
+                        try :
+                            params["xorg"] = [x for x in params["xorg"] if x !=  "safe"]
+                            if not params["xorg"] or not params["xorg"][0]: del params["xorg"] 
+                        except KeyError:
+                            pass
+                        status = "os"
+
+                    elif arg == "vendor":
+                        try:
+                            if not self.os_driver in params["blacklist"]:
+                                params["blacklist"].append(self.os_driver)
+                        except KeyError:
+                            params["blacklist"] = [self.os_driver]
+                        try :
+                            params["xorg"] = [x for x in params["xorg"] if x !=  "safe"]
+                            if not params["xorg"] or not params["xorg"][0]: del params["xorg"]
+                        except KeyError:
+                            pass
+                        status = "vendor"
+
+                    elif arg == "generic":
+                        try:
+                            params["xorg"].append("safe")
+                        except KeyError:
+                            params["xorg"] = ["safe"]
+                        status = "generic"
+
+                    new_line = " ".join(["%s%s%s" % (k, "=" if l[0] else "", ",".join([v for v in l])) for k, l in sorted(params.items())])
+                    configured = old_line != new_line
+                    new_line = 'GRUB_CMDLINE_LINUX="%s"\n' % new_line
+                    grub_tmp.write(new_line)
+                else:
+                    grub_tmp.write(line)
+
+        grub_tmp.close()
+
+        if configured:
+            shutil.copy2(grub_default_file, grub_default_file_back)
+            shutil.copy2(grub_default_file_new, grub_default_file)
+
+        return status, configured
+
+    def update_grub_cfg(self):
+        '''Create new grub2 config file'''
+        os.environ["LANG"] = read_file("/etc/mudur/locale").split("\n")[0]
+        os.environ["PATH"] = "/usr/sbin:/usr/bin:/sbin:/bin"
+
+        shutil.copy2(grub_file, grub_back)
+        try:
+            retcode = call("grub2-mkconfig -o %s" % grub_new, shell=True)
+        except OSError as e:
+            print >>sys.stderr, "Creating %s failed:" % grub_new, e
+        else:
+            shutil.copy2(grub_new, grub_file)
 
     ######################################
     # Grub parsing and writing functions #
@@ -273,6 +390,8 @@
                     new_line = self.update_parameter_in_line(line, "xorg", xorg_param)
                     new_line = self.update_parameter_in_line(new_line, "nomodeset", nomodeset_param)
                     new_line = self.update_parameter_in_line(new_line, "blacklist", blacklist)
+                    # keep indentation
+                    new_line = line.split("linux")[0] + new_line 
                     grub_tmp.write(new_line)
                     configured = line != new_line
 
@@ -291,6 +410,10 @@
 
         return status
 
+def read_file(path):
+    with open(path) as f:
+        return f.read().strip()
+
 if __name__ == '__main__':
     p = Panda()
     
@@ -298,6 +421,7 @@
     print p.get_grub_state()
     print p.get_all_driver_packages()
     print p.get_blacklisted_module()
-    print p.update_grub_entries("vendor")
+#    print p.update_grub_entries("vendor")
+    print p.update_system_files("vendor")
     print p.get_needed_driver_packages(installable=False)
 
--- panda-helper~	2011-01-31 14:00:49.000000000 +0100
+++ panda-helper	2013-06-18 09:06:59.682660862 +0200
@@ -18,7 +18,7 @@
         print ",".join(types)
 
     if args.up is not None:
-        status = p.update_grub_entries(args.up[0])
+        status = p.update_system_files(args.up[0])
         print status
 
     if args.check is not None:
@@ -48,10 +48,10 @@
                             nargs='*',
                             help="List available driver types")
 
-    parser_update = subparsers.add_parser('up', help='Update grub.conf')
+    parser_update = subparsers.add_parser('up', help='Update system files')
     parser_update.add_argument('up',
                             nargs=1,
-                            help="Update grub.conf")
+                            help="Update system files")
 
     parser_update = subparsers.add_parser('check', help='Check for installable packages')
     parser_update.add_argument('check',
