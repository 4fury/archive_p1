From 5ed736a1bc0aacad2675d8cd4e52357bdd15e6cd Mon Sep 17 00:00:00 2001
From: Vishesh Handa <me@vhanda.in>
Date: Mon, 28 Apr 2014 17:29:22 +0200
Subject: [PATCH 21/28] inotifytest: print io usage

---
 src/file/tests/basicindexingqueuetest.cpp | 40 +----------------
 src/file/tests/inotify.cpp                |  2 +
 src/file/tests/util.h                     | 71 +++++++++++++++++++++++++++++++
 3 files changed, 75 insertions(+), 38 deletions(-)
 create mode 100644 src/file/tests/util.h

diff --git a/src/file/tests/basicindexingqueuetest.cpp b/src/file/tests/basicindexingqueuetest.cpp
index bea8bcb..a061e62 100644
--- a/src/file/tests/basicindexingqueuetest.cpp
+++ b/src/file/tests/basicindexingqueuetest.cpp
@@ -30,6 +30,7 @@
 #include "../database.h"
 #include "../fileindexerconfig.h"
 #include "../lib/filemapping.h"
+#include "util.h"
 
 int main(int argc, char** argv)
 {
@@ -58,44 +59,7 @@ int main(int argc, char** argv)
     commitQueue.commit();
     qDebug() << "Elapsed:" << timer.elapsed();
 
-    // Print the io usage
-    QFile file("/proc/self/io");
-    file.open(QIODevice::ReadOnly | QIODevice::Text);
-
-    QTextStream fs(&file);
-    QString str = fs.readAll();
-
-    qDebug() << "------- IO ---------";
-    QTextStream stream(&str);
-    while (!stream.atEnd()) {
-        QString str = stream.readLine();
-
-        QString rchar("rchar: ");
-        if (str.startsWith(rchar)) {
-            ulong amt = str.mid(rchar.size()).toULong();
-            qDebug() << "Read:" << amt / 1024  << "kb";
-        }
-
-        QString wchar("wchar: ");
-        if (str.startsWith(wchar)) {
-            ulong amt = str.mid(wchar.size()).toULong();
-            qDebug() << "Write:" << amt / 1024  << "kb";
-        }
-
-        QString read("read_bytes: ");
-        if (str.startsWith(read)) {
-            ulong amt = str.mid(read.size()).toULong();
-            qDebug() << "Actual Reads:" << amt / 1024  << "kb";
-        }
-
-        QString write("write_bytes: ");
-        if (str.startsWith(write)) {
-            ulong amt = str.mid(write.size()).toULong();
-            qDebug() << "Actual Writes:" << amt / 1024  << "kb";
-        }
-    }
-    qDebug() << "\nThe actual read/writes may be 0 because of an existing"
-             << "cache and /tmp being memory mapped";
+    printIOUsage();
 
     return ret;
 }
diff --git a/src/file/tests/inotify.cpp b/src/file/tests/inotify.cpp
index 4da4826..1be4947 100644
--- a/src/file/tests/inotify.cpp
+++ b/src/file/tests/inotify.cpp
@@ -26,6 +26,7 @@
 #include <iostream>
 
 #include "../kinotify.h"
+#include "util.h"
 
 int main(int argc, char** argv)
 {
@@ -42,4 +43,5 @@ int main(int argc, char** argv)
     app.exec();
 
     std::cout << "Elapsed: " << timer.elapsed() << std::endl;
+    printIOUsage();
 }
diff --git a/src/file/tests/util.h b/src/file/tests/util.h
new file mode 100644
index 0000000..b28b987
--- /dev/null
+++ b/src/file/tests/util.h
@@ -0,0 +1,71 @@
+/*
+ * This file is part of the KDE Baloo Project
+ * Copyright (C) 2014  Vishesh Handa <me@vhanda.in>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) version 3, or any
+ * later version accepted by the membership of KDE e.V. (or its
+ * successor approved by the membership of KDE e.V.), which shall
+ * act as a proxy defined in Section 6 of version 3 of the license.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef BALOO_FILE_TEST_UTIL_H
+#define BALOO_FILE_TEST_UTIL_H
+
+#include <QDebug>
+#include <QFile>
+
+inline void printIOUsage()
+{
+    // Print the io usage
+    QFile file("/proc/self/io");
+    file.open(QIODevice::ReadOnly | QIODevice::Text);
+
+    QTextStream fs(&file);
+    QString str = fs.readAll();
+
+    qDebug() << "------- IO ---------";
+    QTextStream stream(&str);
+    while (!stream.atEnd()) {
+        QString str = stream.readLine();
+
+        QString rchar("rchar: ");
+        if (str.startsWith(rchar)) {
+            ulong amt = str.mid(rchar.size()).toULong();
+            qDebug() << "Read:" << amt / 1024  << "kb";
+        }
+
+        QString wchar("wchar: ");
+        if (str.startsWith(wchar)) {
+            ulong amt = str.mid(wchar.size()).toULong();
+            qDebug() << "Write:" << amt / 1024  << "kb";
+        }
+
+        QString read("read_bytes: ");
+        if (str.startsWith(read)) {
+            ulong amt = str.mid(read.size()).toULong();
+            qDebug() << "Actual Reads:" << amt / 1024  << "kb";
+        }
+
+        QString write("write_bytes: ");
+        if (str.startsWith(write)) {
+            ulong amt = str.mid(write.size()).toULong();
+            qDebug() << "Actual Writes:" << amt / 1024  << "kb";
+        }
+    }
+    qDebug() << "\nThe actual read/writes may be 0 because of an existing"
+             << "cache and /tmp being memory mapped";
+}
+
+#endif
-- 
1.9.0

