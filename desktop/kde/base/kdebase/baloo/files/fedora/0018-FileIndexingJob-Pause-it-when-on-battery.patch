From 96acbfd180a95e1b935bcb3d382cfa0e68d3e4ed Mon Sep 17 00:00:00 2001
From: Vishesh Handa <me@vhanda.in>
Date: Fri, 25 Apr 2014 17:26:03 +0200
Subject: [PATCH 18/28] FileIndexingJob: Pause it when on battery

The FileIndexingJob normally just takes one iteration, except in the few
exceptional cases when there is an offending file. In those cases, we
try to call the extractor again with half those files, and keep
splitting until we find the offending file.

Normally, the file indexer is never run when on battery, so this patch
just makes sure the error detection code is not run when on battery and
the file indexer was already running.

BUG: 332444
---
 src/file/fileindexingjob.cpp   | 27 ++++++++++++++++++++++++---
 src/file/fileindexingjob.h     |  6 ++++++
 src/file/fileindexingqueue.cpp | 28 +++++++++++++++++++++++-----
 src/file/fileindexingqueue.h   |  5 +++++
 src/file/indexingqueue.cpp     | 10 ++++++++++
 src/file/indexingqueue.h       |  2 ++
 6 files changed, 70 insertions(+), 8 deletions(-)

diff --git a/src/file/fileindexingjob.cpp b/src/file/fileindexingjob.cpp
index b07173f..e76bcbe 100644
--- a/src/file/fileindexingjob.cpp
+++ b/src/file/fileindexingjob.cpp
@@ -38,10 +38,13 @@ using namespace Baloo;
 FileIndexingJob::FileIndexingJob(const QVector<uint>& files, QObject* parent)
     : KJob(parent)
     , m_process(0)
+    , m_suspended(false)
 {
     Q_ASSERT(!files.isEmpty());
     m_files.push(files);
 
+    setCapabilities(Suspendable);
+
     // setup the timer used to kill the indexer process if it seems to get stuck
     m_processTimer = new QTimer(this);
     m_processTimer->setSingleShot(true);
@@ -96,7 +99,9 @@ void FileIndexingJob::slotIndexedFile(int, QProcess::ExitStatus exitStatus)
             emitResult();
         } else {
             m_args = m_files.pop();
-            start(m_args);
+            if (!m_suspended) {
+                start(m_args);
+            }
         }
         return;
     }
@@ -115,7 +120,9 @@ void FileIndexingJob::slotIndexedFile(int, QProcess::ExitStatus exitStatus)
             emitResult();
         } else {
             m_args = m_files.pop();
-            start(m_args);
+            if (!m_suspended) {
+                start(m_args);
+            }
         }
         return;
     }
@@ -126,7 +133,9 @@ void FileIndexingJob::slotIndexedFile(int, QProcess::ExitStatus exitStatus)
     m_files.push(m_args.mid(s));
     m_args.resize(s);
 
-    start(m_args);
+    if (!m_suspended) {
+        start(m_args);
+    }
 }
 
 void FileIndexingJob::slotProcessTimerTimeout()
@@ -146,6 +155,18 @@ void FileIndexingJob::setTimeoutInterval(int msec)
     m_processTimeout = msec;
 }
 
+bool FileIndexingJob::doSuspend()
+{
+    m_suspended = true;
+    return true;
+}
+
+bool FileIndexingJob::doResume()
+{
+    m_suspended = false;
+    start(m_args);
+    return true;
+}
 
 
 #include "fileindexingjob.moc"
diff --git a/src/file/fileindexingjob.h b/src/file/fileindexingjob.h
index 3ad5c89..b3b4a27 100644
--- a/src/file/fileindexingjob.h
+++ b/src/file/fileindexingjob.h
@@ -65,6 +65,10 @@ Q_SIGNALS:
      */
     void indexingFailed(uint document);
 
+protected:
+    virtual bool doSuspend();
+    virtual bool doResume();
+
 private Q_SLOTS:
     void slotIndexedFile(int exitCode, QProcess::ExitStatus exitStatus);
     void slotProcessTimerTimeout();
@@ -83,6 +87,8 @@ private:
     int m_processTimeout;
 
     QString m_customDbPath;
+
+    bool m_suspended;
 };
 }
 
diff --git a/src/file/fileindexingqueue.cpp b/src/file/fileindexingqueue.cpp
index bfce37e..ba8955d 100644
--- a/src/file/fileindexingqueue.cpp
+++ b/src/file/fileindexingqueue.cpp
@@ -33,6 +33,7 @@ using namespace Baloo;
 FileIndexingQueue::FileIndexingQueue(Database* db, QObject* parent)
     : IndexingQueue(parent)
     , m_db(db)
+    , m_indexJob(0)
 {
     m_maxSize = 1200;
     m_batchSize = 40;
@@ -78,14 +79,15 @@ void FileIndexingQueue::processNextIteration()
         files << m_fileQueue.pop();
     }
 
-    FileIndexingJob* job = new FileIndexingJob(files, this);
-    connect(job, SIGNAL(indexingFailed(uint)), this, SLOT(slotIndexingFailed(uint)));
-    connect(job, SIGNAL(finished(KJob*)), SLOT(slotFinishedIndexingFile(KJob*)));
+    Q_ASSERT(m_indexJob == 0);
+    m_indexJob = new FileIndexingJob(files, this);
+    connect(m_indexJob, SIGNAL(indexingFailed(uint)), this, SLOT(slotIndexingFailed(uint)));
+    connect(m_indexJob, SIGNAL(finished(KJob*)), SLOT(slotFinishedIndexingFile(KJob*)));
 
-    job->start();
+    m_indexJob->start();
 }
 
-void FileIndexingQueue::slotFinishedIndexingFile(KJob*)
+void FileIndexingQueue::slotFinishedIndexingFile(KJob* job)
 {
     // The process would have modified the db
     m_db->xapianDatabase()->db()->reopen();
@@ -93,6 +95,9 @@ void FileIndexingQueue::slotFinishedIndexingFile(KJob*)
         fillQueue();
     }
     finishIteration();
+
+    Q_ASSERT(job == m_indexJob);
+    m_indexJob = 0;
 }
 
 void FileIndexingQueue::slotIndexingFailed(uint id)
@@ -112,3 +117,16 @@ void FileIndexingQueue::clear()
 {
     m_fileQueue.clear();
 }
+
+void FileIndexingQueue::doResume()
+{
+    if (m_indexJob)
+        m_indexJob->resume();
+}
+
+void FileIndexingQueue::doSuspend()
+{
+    if (m_indexJob)
+        m_indexJob->suspend();
+}
+
diff --git a/src/file/fileindexingqueue.h b/src/file/fileindexingqueue.h
index f5b996e..2b29743 100644
--- a/src/file/fileindexingqueue.h
+++ b/src/file/fileindexingqueue.h
@@ -35,6 +35,7 @@ class Database;
 
 namespace Baloo
 {
+class FileIndexingJob;
 
 class FileIndexingQueue : public IndexingQueue
 {
@@ -52,6 +53,8 @@ Q_SIGNALS:
 
 protected:
     virtual void processNextIteration();
+    virtual void doSuspend();
+    virtual void doResume();
 
 private Q_SLOTS:
     void slotFinishedIndexingFile(KJob* job);
@@ -63,6 +66,8 @@ private:
 
     int m_maxSize;
     int m_batchSize;
+
+    FileIndexingJob* m_indexJob;
 };
 }
 
diff --git a/src/file/indexingqueue.cpp b/src/file/indexingqueue.cpp
index 18741d1..86ca4ce 100644
--- a/src/file/indexingqueue.cpp
+++ b/src/file/indexingqueue.cpp
@@ -50,6 +50,7 @@ void IndexingQueue::processNext()
 
 void IndexingQueue::resume()
 {
+    doResume();
     m_suspended = false;
     if (isEmpty())
         fillQueue();
@@ -59,6 +60,7 @@ void IndexingQueue::resume()
 
 void IndexingQueue::suspend()
 {
+    doSuspend();
     m_suspended = true;
 }
 
@@ -96,3 +98,11 @@ void IndexingQueue::setDelay(int msec)
 {
     m_delay = msec;
 }
+
+void IndexingQueue::doResume()
+{
+}
+
+void IndexingQueue::doSuspend()
+{
+}
diff --git a/src/file/indexingqueue.h b/src/file/indexingqueue.h
index 3fba52b..5dcea6f 100644
--- a/src/file/indexingqueue.h
+++ b/src/file/indexingqueue.h
@@ -85,6 +85,8 @@ protected:
      * \sa finishIndexingFile
      */
     virtual void processNextIteration() = 0;
+    virtual void doSuspend();
+    virtual void doResume();
 
 protected Q_SLOTS:
     /**
-- 
1.9.0

