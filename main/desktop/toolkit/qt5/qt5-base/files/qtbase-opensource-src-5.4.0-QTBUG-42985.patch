diff --git a/src/gui/kernel/qplatformintegration.cpp b/src/gui/kernel/qplatformintegration.cpp
index 39b031e..7f808da 100644
--- a/src/gui/kernel/qplatformintegration.cpp
+++ src/gui/kernel/qplatformintegration.cpp
@@ -429,16 +429,40 @@ QList<int> QPlatformIntegration::possibleKeys(const QKeyEvent *) const
   This adds the screen to QGuiApplication::screens(), and emits the
   QGuiApplication::screenAdded() signal.

+  If the added screen is a primary screen (isPrimary = true), it is prepended
+  to the QGuiApplicationPrivate::screen_list, since
+  QGuiApplication::primaryScreen always returns the first screen in the list.
+
   The screen is automatically removed when the QPlatformScreen is destroyed.
 */
-void QPlatformIntegration::screenAdded(QPlatformScreen *ps)
+void QPlatformIntegration::screenAdded(QPlatformScreen *ps, bool isPrimary)
 {
     QScreen *screen = new QScreen(ps);
     ps->d_func()->screen = screen;
-    QGuiApplicationPrivate::screen_list << screen;
+    if (isPrimary) {
+        QGuiApplicationPrivate::screen_list.prepend(screen);
+    } else {
+        QGuiApplicationPrivate::screen_list.append(screen);
+    }
     emit qGuiApp->screenAdded(screen);
 }

+/*!
+  Should be called by the implementation whenever a screen is removed.
+
+  The implementation should ensure that the screen removed is not the
+  primary screen.
+*/
+void QPlatformIntegration::screenRemoved(QPlatformScreen *ps)
+{
+    if (ps->screen() == QGuiApplicationPrivate::screen_list.first()) {
+        qWarning("Primary screen removed, expect trouble");
+    }
+    if (QGuiApplicationPrivate::screen_list.removeOne(ps->screen()) && qApp) {
+        Q_EMIT qApp->screenRemoved(ps->screen());
+    }
+}
+