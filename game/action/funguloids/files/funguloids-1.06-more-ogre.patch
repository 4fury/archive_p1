Index: funguloids/include/mpakogre.h
===================================================================
--- funguloids.orig/include/mpakogre.h
+++ funguloids/include/mpakogre.h
@@ -58,6 +58,7 @@ public:
 
 	bool exists(const String &filename);
     time_t getModifiedTime(const String &filename);
+    FileInfoListPtr findFileInfo(const String&, bool, bool) const;
 };
 
 
Index: funguloids/src/mpakogre.cpp
===================================================================
--- funguloids.orig/src/mpakogre.cpp
+++ funguloids/src/mpakogre.cpp
@@ -75,10 +75,10 @@ void MPakArchive::load() {
 
 			mFileList.push_back(info);
 		}
-
-		// The following is commented out since it isn't really needed,
-		// I'm not planning to use the override directory.. It wasn't compiling on
-		// Linux anyways, as the _find* aren't exported currently (Ogre Eihort 1.4.0)
+
+		// The following is commented out since it isn't really needed,
+		// I'm not planning to use the override directory.. It wasn't compiling on
+		// Linux anyways, as the _find* aren't exported currently (Ogre Eihort 1.4.0)
 /*
 		// Find the possible files in the override directory (media) and add them too
 		if(mPakFile->override_dir != NULL) {
@@ -198,10 +198,16 @@ bool MPakArchive::exists(const String &f
 	return (i != -1);
 }
 
-time_t MPakArchive::getModifiedTime(const String &filename) {
-    return 0;
-}
-
+time_t MPakArchive::getModifiedTime(const String &filename) {
+    return 0;
+}
+
+FileInfoListPtr MPakArchive::findFileInfo(const String&, bool, bool) const {
+   static FileInfoListPtr filp(new FileInfoList());
+   return filp;
+}
+
+
 const String &MPakArchiveFactory::getType(void) const {
 	static String name = "MPK";
 	return name;
Index: funguloids/src/objectsystem.cpp
===================================================================
--- funguloids.orig/src/objectsystem.cpp
+++ funguloids/src/objectsystem.cpp
@@ -26,7 +26,7 @@
 #include "objectsystem.h"
 #include "game.h"
 
-template<> ObjectSystem* Singleton<ObjectSystem>::ms_Singleton = 0;
+template<> ObjectSystem* Singleton<ObjectSystem>::msSingleton = 0;
 
 
 // ObjectSystem constructor
@@ -135,11 +135,11 @@ void ObjectSystem::findFreePosition(Vect
 
 
 ObjectSystem *ObjectSystem::getSingletonPtr() {
-	return ms_Singleton;
+	return msSingleton;
 }
 
 ObjectSystem &ObjectSystem::getSingleton() {
-	assert(ms_Singleton);
-	return *ms_Singleton;
+	assert(msSingleton);
+	return *msSingleton;
 }
 
