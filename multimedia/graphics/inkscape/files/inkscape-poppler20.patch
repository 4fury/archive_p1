diff -ur a/src/extension/internal/pdfinput/pdf-parser.cpp b/src/extension/internal/pdfinput/pdf-parser.cpp
--- a/src/extension/internal/pdfinput/pdf-parser.cpp	2012-12-13 19:00:46.726633000 +0200
+++ b/src/extension/internal/pdfinput/pdf-parser.cpp	2013-03-26 11:01:13.744803069 +0200
@@ -370,7 +370,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	error(errInternal, -1, "Weird page contents");
 #else
-	error(-1, const_cast<char*>("Weird page contents"));
+	error(errInternal, -1, const_cast<char*>("Weird page contents"));
 #endif
 	obj2.free();
 	return;
@@ -381,7 +381,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	error(errInternal, -1, "Weird page contents");
 #else
-	error(-1, const_cast<char*>("Weird page contents"));
+	error(errInternal, -1, const_cast<char*>("Weird page contents"));
 #endif
     	return;
   }
@@ -430,7 +430,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Too many args in content stream");
 #else
-      error(getPos(), const_cast<char*>("Too many args in content stream"));
+      error(errInternal, getPos(), const_cast<char*>("Too many args in content stream"));
 #endif
       if (printCommands) {
 	printf("throwing away arg: ");
@@ -451,7 +451,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Leftover args in content stream");
 #else
-    error(getPos(), const_cast<char*>("Leftover args in content stream"));
+    error(errInternal, getPos(), const_cast<char*>("Leftover args in content stream"));
 #endif
     if (printCommands) {
       printf("%d leftovers:", numArgs);
@@ -521,7 +521,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Unknown operator '{0:s}'", name);
 #else
-      error(getPos(), const_cast<char*>("Unknown operator '%s'"), name);
+      error(errInternal, getPos(), const_cast<char*>("Unknown operator '%s'"), name);
 #endif
     return;
   }
@@ -533,7 +533,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Too few ({0:d}) args to '{1:d}' operator", numArgs, name);
 #else
-      error(getPos(), const_cast<char*>("Too few (%d) args to '%s' operator"), numArgs, name);
+      error(errInternal, getPos(), const_cast<char*>("Too few (%d) args to '%s' operator"), numArgs, name);
 #endif
       return;
     }
@@ -542,7 +542,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Too many ({0:d}) args to '{1:s}' operator", numArgs, name);
 #else
-      error(getPos(), "Too many (%d) args to '%s' operator", numArgs, name);
+      error(errInternal, getPos(), "Too many (%d) args to '%s' operator", numArgs, name);
 #endif
 #endif
       argPtr += numArgs - op->numArgs;
@@ -553,7 +553,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Too many ({0:d}) args to '{1:s}' operator",
 #else
-      error(getPos(), const_cast<char*>("Too many (%d) args to '%s' operator"),
+      error(errInternal, getPos(), const_cast<char*>("Too many (%d) args to '%s' operator"),
 #endif
 	    numArgs, name);
       return;
@@ -564,7 +564,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Arg #{0:d} to '{1:s}' operator is wrong type ({2:s})",
 #else
-      error(getPos(), const_cast<char*>("Arg #%d to '%s' operator is wrong type (%s)"),
+      error(errInternal, getPos(), const_cast<char*>("Arg #%d to '%s' operator is wrong type (%s)"),
 #endif
 	    i, name, argPtr[i].getTypeName());
       return;
@@ -729,7 +729,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "ExtGState '{0:s}' is wrong type"), args[0].getName();
 #else
-    error(getPos(), const_cast<char*>("ExtGState '%s' is wrong type"), args[0].getName());
+    error(errInternal, getPos(), const_cast<char*>("ExtGState '%s' is wrong type"), args[0].getName());
 #endif
     obj1.free();
     return;
@@ -748,7 +748,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Invalid blend mode in ExtGState");
 #else
-      error(getPos(), const_cast<char*>("Invalid blend mode in ExtGState"));
+      error(errInternal, getPos(), const_cast<char*>("Invalid blend mode in ExtGState"));
 #endif
     }
   }
@@ -811,7 +811,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Invalid transfer function in ExtGState");
 #else
-    error(getPos(), const_cast<char*>("Invalid transfer function in ExtGState"));
+    error(errInternal, getPos(), const_cast<char*>("Invalid transfer function in ExtGState"));
 #endif
   }
   obj2.free();
@@ -835,7 +835,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	  error(errSyntaxError, getPos(), "Invalid transfer function in soft mask in ExtGState");
 #else
-	  error(getPos(), const_cast<char*>("Invalid transfer function in soft mask in ExtGState"));
+	  error(errInternal, getPos(), const_cast<char*>("Invalid transfer function in soft mask in ExtGState"));
 #endif
 	  delete funcs[0];
 	  funcs[0] = NULL;
@@ -860,11 +860,10 @@
 	  blendingColorSpace = NULL;
 	  isolated = knockout = gFalse;
 	  if (!obj4.dictLookup(const_cast<char*>("CS"), &obj5)->isNull()) {
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
 	    blendingColorSpace = GfxColorSpace::parse(&obj5, NULL);
-#else
-	    blendingColorSpace = GfxColorSpace::parse(&obj5);
-#endif
+
+
 	  }
 	  obj5.free();
 	  if (obj4.dictLookup(const_cast<char*>("I"), &obj5)->isBool()) {
@@ -894,7 +893,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	  error(errSyntaxError, getPos(), "Invalid soft mask in ExtGState - missing group");
 #else
-	  error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+	  error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
 #endif
 	}
 	obj4.free();
@@ -902,7 +901,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	error(errSyntaxError, getPos(), "Invalid soft mask in ExtGState - missing group");
 #else
-	error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
+	error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState - missing group"));
 #endif
       }
       obj3.free();
@@ -910,7 +909,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Invalid soft mask in ExtGState");
 #else
-      error(getPos(), const_cast<char*>("Invalid soft mask in ExtGState"));
+      error(errInternal, getPos(), const_cast<char*>("Invalid soft mask in ExtGState"));;
 #endif
     }
   }
@@ -942,7 +941,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Unknown form type");
 #else
-    error(getPos(), const_cast<char*>("Unknown form type"));
+    error(errInternal, getPos(), const_cast<char*>("Unknown form type"));
 #endif
   }
   obj1.free();
@@ -954,7 +953,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Bad form bounding box");
 #else
-    error(getPos(), const_cast<char*>("Bad form bounding box"));
+    error(errInternal, getPos(), const_cast<char*>("Bad form bounding box"));
 #endif
     return;
   }
@@ -1083,19 +1082,12 @@
 
   state->setFillPattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
   if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
     colorSpace = GfxColorSpace::parse(&obj, NULL);
   }
-#else
-  if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(&args[0]);
-  } else {
-    colorSpace = GfxColorSpace::parse(&obj);
-  }
-#endif
+
   obj.free();
   if (colorSpace) {
     state->setFillColorSpace(colorSpace);
@@ -1106,7 +1098,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Bad color space (fill)");
 #else
-    error(getPos(), const_cast<char*>("Bad color space (fill)"));
+    error(errInternal, getPos(), const_cast<char*>("Bad color space (fill)"));
 #endif
   }
 }
@@ -1118,19 +1110,13 @@
 
   state->setStrokePattern(NULL);
   res->lookupColorSpace(args[0].getName(), &obj);
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
   if (obj.isNull()) {
     colorSpace = GfxColorSpace::parse(&args[0], NULL);
   } else {
     colorSpace = GfxColorSpace::parse(&obj, NULL);
   }
-#else
-  if (obj.isNull()) {
-    colorSpace = GfxColorSpace::parse(&args[0]);
-  } else {
-    colorSpace = GfxColorSpace::parse(&obj);
-  }
-#endif
+
   obj.free();
   if (colorSpace) {
     state->setStrokeColorSpace(colorSpace);
@@ -1141,7 +1127,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Bad color space (stroke)");
 #else
-    error(getPos(), const_cast<char*>("Bad color space (stroke)"));
+    error(errInternal, getPos(), const_cast<char*>("Bad color space (stroke)"));
 #endif
   }
 }
@@ -1154,7 +1140,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Incorrect number of arguments in 'sc' command");
 #else
-    error(getPos(), const_cast<char*>("Incorrect number of arguments in 'sc' command"));
+    error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'sc' command"));
 #endif
     return;
   }
@@ -1174,7 +1160,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SC' command");
 #else
-    error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SC' command"));
+    error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SC' command"));
 #endif
     return;
   }
@@ -1199,7 +1185,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	error(errSyntaxError, getPos(), "Incorrect number of arguments in 'scn' command");
 #else
-	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+	error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
 #endif
 	return;
       }
@@ -1211,26 +1197,19 @@
       state->setFillColor(&color);
       builder->updateStyle(state);
     }
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
     if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setFillPattern(pattern);
       builder->updateStyle(state);
     }
-#else
-    if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
-      state->setFillPattern(pattern);
-      builder->updateStyle(state);
-    }
-#endif
 
   } else {
     if (numArgs != state->getFillColorSpace()->getNComps()) {
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Incorrect number of arguments in 'scn' command");
 #else
-      error(getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
+      error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'scn' command"));
 #endif
       return;
     }
@@ -1259,7 +1238,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SCN' command");
 #else
-	error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+	error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
 #endif
 	return;
       }
@@ -1271,26 +1250,19 @@
       state->setStrokeColor(&color);
       builder->updateStyle(state);
     }
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
     if (args[numArgs-1].isName() &&
 	(pattern = res->lookupPattern(args[numArgs-1].getName(), NULL))) {
       state->setStrokePattern(pattern);
       builder->updateStyle(state);
     }
-#else
-    if (args[numArgs-1].isName() &&
-	(pattern = res->lookupPattern(args[numArgs-1].getName()))) {
-      state->setStrokePattern(pattern);
-      builder->updateStyle(state);
-    }
-#endif
 
   } else {
     if (numArgs != state->getStrokeColorSpace()->getNComps()) {
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Incorrect number of arguments in 'SCN' command");
 #else
-      error(getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
+      error(errInternal, getPos(), const_cast<char*>("Incorrect number of arguments in 'SCN' command"));
 #endif
       return;
     }
@@ -1318,7 +1290,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No current point in lineto");
 #else
-    error(getPos(), const_cast<char*>("No current point in lineto"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in lineto"));
 #endif
     return;
   }
@@ -1332,7 +1304,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No current point in curveto");
 #else
-    error(getPos(), const_cast<char*>("No current point in curveto"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto"));
 #endif
     return;
   }
@@ -1352,7 +1324,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No current point in curveto1");
 #else
-    error(getPos(), const_cast<char*>("No current point in curveto1"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto1"));
 #endif
     return;
   }
@@ -1372,7 +1344,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No current point in curveto2");
 #else
-    error(getPos(), const_cast<char*>("No current point in curveto2"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in curveto2"));
 #endif
     return;
   }
@@ -1404,7 +1376,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No current point in closepath");
 #else
-    error(getPos(), const_cast<char*>("No current point in closepath"));
+    error(errInternal, getPos(), const_cast<char*>("No current point in closepath"));
 #endif
     return;
   }
@@ -1421,7 +1393,7 @@
 
 void PdfParser::opStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1437,7 +1409,7 @@
 
 void PdfParser::opCloseStroke(Object * /*args[]*/, int /*numArgs*/) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/stroke"));
     return;
   }
   state->closePath();
@@ -1454,7 +1426,7 @@
 
 void PdfParser::opFill(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in fill"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in fill"));
     return;
   }
   if (state->isPath()) {
@@ -1470,7 +1442,7 @@
 
 void PdfParser::opEOFill(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in eofill"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in eofill"));
     return;
   }
   if (state->isPath()) {
@@ -1486,7 +1458,7 @@
 
 void PdfParser::opFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in fill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in fill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1499,7 +1471,7 @@
 
 void PdfParser::opCloseFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/fill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/fill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1511,7 +1483,7 @@
 
 void PdfParser::opEOFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in eofill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in eofill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1522,7 +1494,7 @@
 
 void PdfParser::opCloseEOFillStroke(Object args[], int numArgs) {
   if (!state->isCurPt()) {
-    //error(getPos(), const_cast<char*>("No path in closepath/eofill/stroke"));
+    //error(errInternal, getPos(), const_cast<char*>("No path in closepath/eofill/stroke"));
     return;
   }
   if (state->isPath()) {
@@ -1566,7 +1538,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errUnimplemented, getPos(), "Unimplemented pattern type (%d) in fill",
 #else
-    error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in fill"),
+    error(errInternal, getPos(), const_cast<char*>("Unimplemented pattern type (%d) in fill"),
 #endif
 	  pattern->getType());
     break;
@@ -1589,7 +1561,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errUnimplemented, getPos(), "Unimplemented pattern type ({0:d}) in stroke",
 #else
-    error(getPos(), const_cast<char*>("Unimplemented pattern type (%d) in stroke"),
+    error(errInternal, getPos(), const_cast<char*>("Unimplemented pattern type (%d) in stroke"),
 #endif
 	  pattern->getType());
     break;
@@ -1710,15 +1682,10 @@
   double *matrix = NULL;
   GBool savedState = gFalse;
 
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
   if (!(shading = res->lookupShading(args[0].getName(), NULL))) {
     return;
   }
-#else
-  if (!(shading = res->lookupShading(args[0].getName()))) {
-    return;
-  }
-#endif
 
   // save current graphics state
   if (shading->getType() != 2 && shading->getType() != 3) {
@@ -2290,7 +2257,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No font in show");
 #else
-    error(getPos(), const_cast<char*>("No font in show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in show"));
 #endif
     return;
   }
@@ -2308,7 +2275,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No font in move/show");
 #else
-    error(getPos(), const_cast<char*>("No font in move/show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in move/show"));
 #endif
     return;
   }
@@ -2330,7 +2297,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No font in move/set/show");
 #else
-    error(getPos(), const_cast<char*>("No font in move/set/show"));
+    error(errInternal, getPos(), const_cast<char*>("No font in move/set/show"));
 #endif
     return;
   }
@@ -2357,7 +2324,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "No font in show/space");
 #else
-    error(getPos(), const_cast<char*>("No font in show/space"));
+    error(errInternal, getPos(), const_cast<char*>("No font in show/space"));
 #endif
     return;
   }
@@ -2386,7 +2353,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Element of show/space array must be number or string");
 #else
-      error(getPos(), const_cast<char*>("Element of show/space array must be number or string"));
+      error(errInternal, getPos(), const_cast<char*>("Element of show/space array must be number or string"));
 #endif
     }
     obj.free();
@@ -2488,7 +2455,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
 	  error(errSyntaxError, getPos(), "Missing or bad Type3 CharProc entry");
 #else
-	  error(getPos(), const_cast<char*>("Missing or bad Type3 CharProc entry"));
+	  error(errInternal, getPos(), const_cast<char*>("Missing or bad Type3 CharProc entry"));
 #endif
 	}
 	//out->endType3Char(state);
@@ -2568,7 +2535,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "XObject '{0:s}' is wrong type", name);
 #else
-    error(getPos(), const_cast<char*>("XObject '%s' is wrong type"), name);
+    error(errInternal, getPos(), const_cast<char*>("XObject '%s' is wrong type"), name);
 #endif
     obj1.free();
     return;
@@ -2588,13 +2555,13 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Unknown XObject subtype '{0:s}'", obj2.getName());
 #else
-    error(getPos(), const_cast<char*>("Unknown XObject subtype '%s'"), obj2.getName());
+    error(errInternal, getPos(), const_cast<char*>("Unknown XObject subtype '%s'"), obj2.getName());
 #endif
   } else {
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "XObject subtype is missing or wrong type");
 #else
-    error(getPos(), const_cast<char*>("XObject subtype is missing or wrong type"));
+    error(errInternal, getPos(), const_cast<char*>("XObject subtype is missing or wrong type"));
 #endif
   }
   obj2.free();
@@ -2726,11 +2693,10 @@
       }
     }
     if (!obj1.isNull()) {
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
       colorSpace = GfxColorSpace::parse(&obj1, NULL);
-#else
-      colorSpace = GfxColorSpace::parse(&obj1);
-#endif
+
+
     } else if (csMode == streamCSDeviceGray) {
       colorSpace = new GfxDeviceGrayColorSpace();
     } else if (csMode == streamCSDeviceRGB) {
@@ -2815,11 +2781,10 @@
 	  obj2.free();
 	}
       }
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
       maskColorSpace = GfxColorSpace::parse(&obj1, NULL);
-#else
-      maskColorSpace = GfxColorSpace::parse(&obj1);
-#endif
+
+
       obj1.free();
       if (!maskColorSpace || maskColorSpace->getMode() != csDeviceGray) {
 	goto err1;
@@ -2928,7 +2893,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
   error(errSyntaxError, getPos(), "Bad image parameters");
 #else
-  error(getPos(), const_cast<char*>("Bad image parameters"));
+  error(errInternal, getPos(), const_cast<char*>("Bad image parameters"));
 #endif
 }
 
@@ -2957,7 +2922,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Unknown form type");
 #else
-    error(getPos(), const_cast<char*>("Unknown form type"));
+    error(errInternal, getPos(), const_cast<char*>("Unknown form type"));
 #endif
   }
   obj1.free();
@@ -2969,7 +2934,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "Bad form bounding box");
 #else
-    error(getPos(), const_cast<char*>("Bad form bounding box"));
+    error(errInternal, getPos(), const_cast<char*>("Bad form bounding box"));
 #endif
     return;
   }
@@ -3006,11 +2971,10 @@
     if (obj1.dictLookup(const_cast<char*>("S"), &obj2)->isName(const_cast<char*>("Transparency"))) {
       transpGroup = gTrue;
       if (!obj1.dictLookup(const_cast<char*>("CS"), &obj3)->isNull()) {
-#if defined(POPPLER_NEW_COLOR_SPACE_API) || defined(POPPLER_NEW_ERRORAPI)
+
 	blendingColorSpace = GfxColorSpace::parse(&obj3, NULL);
-#else
-	blendingColorSpace = GfxColorSpace::parse(&obj3);
-#endif
+
+
       }
       obj3.free();
       if (obj1.dictLookup(const_cast<char*>("I"), &obj3)->isBool()) {
@@ -3172,7 +3136,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
       error(errSyntaxError, getPos(), "Inline image dictionary key must be a name object");
 #else
-      error(getPos(), const_cast<char*>("Inline image dictionary key must be a name object"));
+      error(errInternal, getPos(), const_cast<char*>("Inline image dictionary key must be a name object"));
 #endif
       obj.free();
     } else {
@@ -3191,7 +3155,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
     error(errSyntaxError, getPos(), "End of file in inline image");
 #else
-    error(getPos(), const_cast<char*>("End of file in inline image"));
+    error(errInternal, getPos(), const_cast<char*>("End of file in inline image"));
 #endif
     obj.free();
     dict.free();
@@ -3210,7 +3174,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
   error(errInternal, getPos(), "Internal: got 'ID' operator");
 #else
-  error(getPos(), const_cast<char*>("Internal: got 'ID' operator"));
+  error(errInternal, getPos(), const_cast<char*>("Internal: got 'ID' operator"));
 #endif
 }
 
@@ -3218,7 +3182,7 @@
 #ifdef POPPLER_NEW_ERRORAPI
   error(errInternal, getPos(), "Internal: got 'EI' operator");
 #else
-  error(getPos(), const_cast<char*>("Internal: got 'EI' operator"));
+  error(errInternal, getPos(), const_cast<char*>("Internal: got 'EI' operator"));
 #endif
 }
 
