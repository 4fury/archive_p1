--- codeblocks-12.11release8629-orig/src/plugins/debuggergdb/parsewatchvalue.cpp	2012-11-23 20:58:15.000000000 +0200
+++ codeblocks-12.11release8629/src/plugins/debuggergdb/parsewatchvalue.cpp	2013-01-22 22:03:44.591542259 +0200
@@ -64,7 +64,7 @@
 };
 
 wxRegEx regexRepeatedChars(wxT("^((\\\\'.{1,6}\\\\')|('.{1,6}'))[ \\t](<repeats[ \\t][0-9]+[ \\t]times>)"),
-#ifndef __WXMAC__
+#ifdef wxHAS_REGEX_ADVANCED
                            wxRE_ADVANCED);
 #else
                            wxRE_EXTENDED);
--- codeblocks-12.11release8629-orig/src/plugins/debuggergdb/gdb_commands.h	2012-11-23 20:58:15.000000000 +0200
+++ codeblocks-12.11release8629/src/plugins/debuggergdb/gdb_commands.h	2013-01-22 22:22:52.220502525 +0200
@@ -201,13 +201,13 @@
 //static wxRegEx reStepI(_T("\x1a\x1a.*?:([0-9]*):([0-9]*):(.*?):(.*)"));
 //static wxRegEx reStepI(_T("\x1a\x1a(([a-zA-Z]:)?.*?):([0-9]*):([0-9]*):(middle|beg):(.*)"));
 static wxRegEx reStepI(wxT("(((.*)[a-zA-Z]:)?.*)?:(\\d+):(middle|beg):(.*)"),
-#ifndef __WXMAC__
+#ifdef wxHAS_REGEX_ADVANCED
                        wxRE_ADVANCED);
 #else
                        wxRE_EXTENDED);
 #endif
 static wxRegEx reStepI2(_T("\\A(0x[A-Fa-f0-9]+)\\s+(\\d+)\\s+in (.*)"),
-#ifndef __WXMAC__
+#ifdef wxHAS_REGEX_ADVANCED
                        wxRE_ADVANCED);
 #else
                        wxRE_EXTENDED);
@@ -216,7 +216,7 @@
 static wxRegEx reStepI4(_T("^(0x[A-Fa-f0-9]+) in (.*)? at (.*)"));
 
 static wxRegEx reNextI(_T("\x1a\x1a(([a-zA-Z]:)?.*?):([0-9]*):([0-9]*):(middle|beg):(.*)"),
-#ifndef __WXMAC__
+#ifdef wxHAS_REGEX_ADVANCED
                        wxRE_ADVANCED);
 #else
                        wxRE_EXTENDED);
@@ -627,36 +627,6 @@
 };
 
 /**
-  * Command to setup an exception breakpoint (for a throw or a catch).
-  */
-class GdbCmd_SetCatch : public DebuggerCmd
-{
-        wxString m_type;
-        int *m_resultIndex;
-        wxRegEx m_regExp;
-    public:
-        GdbCmd_SetCatch(DebuggerDriver *driver, const wxString &type, int *resultIndex) :
-            DebuggerCmd(driver),
-            m_type(type),
-            m_resultIndex(resultIndex),
-            m_regExp(wxT("^Catchpoint[ \\t]([0-9]+)[ \\t]\\(") + type + wxT("\\)$"), wxRE_ADVANCED)
-        {
-            m_Cmd = wxT("catch ") + type;
-        }
-
-        void ParseOutput(const wxString& output)
-        {
-            if (m_regExp.Matches(output))
-            {
-                long index;
-                m_regExp.GetMatch(output, 1).ToLong(&index);
-                *m_resultIndex = index;
-            }
-        }
-};
-
-
-/**
   * Command that notifies the debugger plugin that the debuggee has been continued
   */
 class GdbCmd_Continue : public DebuggerContinueBaseCmd
 
 --- codeblocks-12.11release8629-orig/src/plugins/debuggergdb/gdb_driver.cpp	2012-11-23 20:58:15.000000000 +0200
+++ codeblocks-12.11release8629/src/plugins/debuggergdb/gdb_driver.cpp	2013-01-23 00:16:51.780265717 +0200
@@ -213,105 +213,6 @@
     m_pTarget = target;
 }
 
-void GDB_driver::Prepare(bool isConsole, int printElements)
-{
-    // default initialization
-
-    // for the possibility that the program to be debugged is compiled under Cygwin
-    if (platform::windows)
-        DetectCygwinMount();
-
-    // make sure we 're using the prompt that we know and trust ;)
-    QueueCommand(new DebuggerCmd(this, wxString(_T("set prompt ")) + FULL_GDB_PROMPT));
-
-    // debugger version
-    QueueCommand(new DebuggerCmd(this, _T("show version")));
-    // no confirmation
-    QueueCommand(new DebuggerCmd(this, _T("set confirm off")));
-    // no wrapping lines
-    QueueCommand(new DebuggerCmd(this, _T("set width 0")));
-    // no pagination
-    QueueCommand(new DebuggerCmd(this, _T("set height 0")));
-    // allow pending breakpoints
-    QueueCommand(new DebuggerCmd(this, _T("set breakpoint pending on")));
-    // show pretty function names in disassembly
-    QueueCommand(new DebuggerCmd(this, _T("set print asm-demangle on")));
-    // unwind stack on signal
-    QueueCommand(new DebuggerCmd(this, _T("set unwindonsignal on")));
-    // disalbe result string truncations
-    QueueCommand(new DebuggerCmd(this, wxString::Format(wxT("set print elements %d"), printElements)));
-
-    if (platform::windows && isConsole)
-        QueueCommand(new DebuggerCmd(this, _T("set new-console on")));
-
-    flavour = m_pDBG->GetActiveConfigEx().GetDisassemblyFlavorCommand();
-    QueueCommand(new DebuggerCmd(this, flavour));
-
-    if (m_pDBG->GetActiveConfigEx().GetFlag(DebuggerConfiguration::CatchExceptions))
-    {
-        m_catchThrowIndex = -1;
-        // catch exceptions
-        QueueCommand(new GdbCmd_SetCatch(this, wxT("throw"), &m_catchThrowIndex));
-    }
-
-    // define all scripted types
-    m_Types.Clear();
-    InitializeScripting();
-
-    // pass user init-commands
-    wxString init = m_pDBG->GetActiveConfigEx().GetInitCommands();
-    Manager::Get()->GetMacrosManager()->ReplaceMacros(init);
-    // commands are passed in one go, in case the user defines functions in there
-    // or else it would lock up...
-    QueueCommand(new DebuggerCmd(this, init));
-//    wxArrayString initCmds = GetArrayFromString(init, _T('\n'));
-//    for (unsigned int i = 0; i < initCmds.GetCount(); ++i)
-//    {
-//        QueueCommand(new DebuggerCmd(this, initCmds[i]));
-//    }
-
-    // add search dirs
-    for (unsigned int i = 0; i < m_Dirs.GetCount(); ++i)
-        QueueCommand(new GdbCmd_AddSourceDir(this, m_Dirs[i]));
-
-    // set arguments
-    if (!m_Args.IsEmpty())
-        QueueCommand(new DebuggerCmd(this, _T("set args ") + m_Args));
-
-    RemoteDebugging* rd = GetRemoteDebuggingInfo();
-
-    // send additional gdb commands before establishing remote connection
-    if (rd)
-    {
-        if (!rd->additionalCmdsBefore.IsEmpty())
-        {
-            wxArrayString initCmds = GetArrayFromString(rd->additionalCmdsBefore, _T('\n'));
-            for (unsigned int i = 0; i < initCmds.GetCount(); ++i)
-                QueueCommand(new DebuggerCmd(this, initCmds[i]));
-        }
-    }
-
-    // if performing remote debugging, now is a good time to try and connect to the target :)
-    if (rd && rd->IsOk())
-    {
-        if (rd->connType == RemoteDebugging::Serial)
-            QueueCommand(new GdbCmd_RemoteBaud(this, rd->serialBaud));
-        QueueCommand(new GdbCmd_RemoteTarget(this, rd));
-    }
-
-    // run per-target additional commands (remote debugging)
-    // moved after connection to remote target (if any)
-    if (rd)
-    {
-        if (!rd->additionalCmds.IsEmpty())
-        {
-            wxArrayString initCmds = GetArrayFromString(rd->additionalCmds, _T('\n'));
-            for (unsigned int i = 0; i < initCmds.GetCount(); ++i)
-                QueueCommand(new DebuggerCmd(this, initCmds[i]));
-        }
-    }
-}
-
 // remote debugging
 RemoteDebugging* GDB_driver::GetRemoteDebuggingInfo()
 {
@@ -629,17 +530,6 @@
     QueueCommand(new DebuggerInfoCmd(this, _T("info signals"), _("Signals handling")));
 }
 
-void GDB_driver::EnableCatchingThrow(bool enable)
-{
-    if (enable)
-        QueueCommand(new GdbCmd_SetCatch(this, wxT("throw"), &m_catchThrowIndex));
-    else if (m_catchThrowIndex != -1)
-    {
-        QueueCommand(new DebuggerCmd(this, wxString::Format(wxT("delete %d"), m_catchThrowIndex)));
-        m_catchThrowIndex = -1;
-    }
-}
-
 void GDB_driver::SwitchThread(size_t threadIndex)
 {
     ResetCursor();

