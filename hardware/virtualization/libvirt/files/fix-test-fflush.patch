Index: libvirt-1.0.5/gnulib/tests/test-fflush.c
===================================================================
--- libvirt-1.0.5.orig/gnulib/tests/test-fflush.c
+++ libvirt-1.0.5/gnulib/tests/test-fflush.c
@@ -1,5 +1,7 @@
+/* -*- buffer-read-only: t -*- vi: set ro: */
+/* DO NOT EDIT! GENERATED AUTOMATICALLY! */
 /* Test of POSIX compatible fflush() function.
-   Copyright (C) 2007, 2009-2013 Free Software Foundation, Inc.
+   Copyright (C) 2007 Free Software Foundation, Inc.
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
@@ -18,21 +20,11 @@
 
 #include <config.h>
 
-/* None of the files accessed by this test are large, so disable the
-   ftell link warning if we are not using the gnulib ftell module.  */
-#define _GL_NO_LARGE_FILES
 #include <stdio.h>
-
-#include "signature.h"
-SIGNATURE_CHECK (fflush, int, (FILE *));
-
-#include <errno.h>
 #include <unistd.h>
 
-#include "macros.h"
-
 int
-main (void)
+main (int argc, char *argv[])
 {
   FILE *f;
   char buffer[10];
@@ -49,13 +41,11 @@ main (void)
 
   /* Test fflush.  */
   f = fopen ("test-fflush.txt", "r");
-  ASSERT (f != NULL);
   fd = fileno (f);
   if (!f || 0 > fd || fread (buffer, 1, 5, f) != 5)
     {
       fputs ("Failed initial read of sample file.\n", stderr);
-      if (f)
-        fclose (f);
+      fclose (f);
       unlink ("test-fflush.txt");
       return 1;
     }
@@ -71,7 +61,7 @@ main (void)
     }
 #endif
   /* POSIX requires fflush-fseek to set file offset of fd.  */
-  if (fflush (f) != 0 || fseeko (f, 0, SEEK_CUR) != 0)
+  if (fflush (f) != 0 || fseek (f, 0, SEEK_CUR) != 0)
     {
       fputs ("Failed to flush-fseek sample file.\n", stderr);
       fclose (f);
@@ -82,7 +72,7 @@ main (void)
   if (lseek (fd, 0, SEEK_CUR) != 5)
     {
       fprintf (stderr, "File offset is wrong after fseek: %ld.\n",
-               (long) lseek (fd, 0, SEEK_CUR));
+	       (long) lseek (fd, 0, SEEK_CUR));
       fclose (f);
       unlink ("test-fflush.txt");
       return 1;
@@ -90,7 +80,7 @@ main (void)
   if (ftell (f) != 5)
     {
       fprintf (stderr, "ftell result is wrong after fseek: %ld.\n",
-               (long) ftell (f));
+	       (long) ftell (f));
       fclose (f);
       unlink ("test-fflush.txt");
       return 1;
@@ -123,7 +113,7 @@ main (void)
   if (lseek (fd, 0, SEEK_CUR) != 6)
     {
       fprintf (stderr, "File offset is wrong after fseeko: %ld.\n",
-               (long) lseek (fd, 0, SEEK_CUR));
+	       (long) lseek (fd, 0, SEEK_CUR));
       fclose (f);
       unlink ("test-fflush.txt");
       return 1;
@@ -131,7 +121,7 @@ main (void)
   if (ftell (f) != 6)
     {
       fprintf (stderr, "ftell result is wrong after fseeko: %ld.\n",
-               (long) ftell (f));
+	       (long) ftell (f));
       fclose (f);
       unlink ("test-fflush.txt");
       return 1;
@@ -145,47 +135,7 @@ main (void)
       return 1;
     }
   fclose (f);
-
-  /* Test that fflush() sets errno if someone else closes the stream
-     fd behind the back of stdio.  */
-  {
-    FILE *fp = fopen ("test-fflush.txt", "w");
-    ASSERT (fp != NULL);
-    fputc ('x', fp);
-    ASSERT (close (fileno (fp)) == 0);
-    errno = 0;
-    ASSERT (fflush (fp) == EOF);
-    ASSERT (errno == EBADF);
-    fclose (fp);
-  }
-
-  /* Test that fflush() sets errno if the stream was constructed with
-     an invalid file descriptor.  */
-  {
-    FILE *fp = fdopen (-1, "w");
-    if (fp != NULL)
-      {
-        fputc ('x', fp);
-        errno = 0;
-        ASSERT (fflush (fp) == EOF);
-        ASSERT (errno == EBADF);
-      }
-  }
-  {
-    FILE *fp;
-    close (99);
-    fp = fdopen (99, "w");
-    if (fp != NULL)
-      {
-        fputc ('x', fp);
-        errno = 0;
-        ASSERT (fflush (fp) == EOF);
-        ASSERT (errno == EBADF);
-      }
-  }
-
-  /* Clean up.  */
   unlink ("test-fflush.txt");
-
   return 0;
 }
+
